#!/usr/bin/env ruby

require 'optparse'
require 'time'
require 'iron_worker_ng'

if $*.size == 0 || (not ['upload', 'queue', 'schedule'].include?($*[0]))
  puts 'usage: iron_worker_ng COMMAND [OPTIONS]'
  puts '    COMMAND: upload, queue, schedule'
  puts '    run iron_worker_ng COMMAND --help to get more information about each command'
  exit 1
end

command = $*[0]
$*.shift

if ENV['IRON_IO_PROJECT_ID'].nil? || ENV['IRON_IO_TOKEN'].nil?
  puts "please set $IRON_IO_PROJECT_ID and $IRON_IO_TOKEN environment variables"
  exit 1
end

client = IronWorkerNG::Client.new(ENV['IRON_IO_PROJECT_ID'], ENV['IRON_IO_TOKEN'])

if command == 'upload'
  runtimes = IronWorkerNG::Code::Base.registered_types
  runtimes_help = runtimes[0][:name] + ' (default)' + (runtimes.size == 1 ? '' : ', ') + runtimes.map { |r| r[:name] }[1 .. -1].join(', ')

  features = []

  name = nil
  runtime = nil
  execute_features = []

  opts = OptionParser.new do |opts|
    opts.banner = 'usage: iron_worker_ng upload [OPTIONS]'

    opts.on('-r', '--runtime RUNTIME', runtimes.map { |r| r[:name] }, "#{runtimes_help}") do |v|
      runtime = v
    end

    opts.on('-n', '--name NAME', 'code name') do |v|
      name = v
    end

    IronWorkerNG::Code::Base.registered_features.each do |f|
      prefix = ''

      if f[:for_klass] != IronWorkerNG::Code::Base
        prefix = runtimes.find { |r| r[:klass] == f[:for_klass] }[:name] + '-'
      end

      opts.on("--#{prefix}#{f[:name].gsub('_', '-')} #{f[:args]}", Array) do |v|
        execute_features << {:name => f[:name], :args => v}
      end
    end
  end

  begin
    opts.parse!
  rescue OptionParser::ParseError
    puts $!.to_s
    exit 1
  end

  if execute_features.size == 0
    puts opts
    exit 1
  end

  runtime = runtimes[0][:name] if runtime.nil?

  code = runtimes.find { |r| r[:name] == runtime }[:klass].new(name)

  execute_features.each do |f|
    code.send(f[:name], *f[:args])
  end

  client.upload(code)
elsif command == 'queue' || command == 'schedule'
  name = nil
  params = {}

  priority = nil
  timeout = nil
  delay = nil

  start_at = nil
  end_at = nil
  run_times = nil
  run_every = nil

  opts = OptionParser.new do |opts|
    opts.banner = "usage: iron_worker_ng #{command} [OPTIONS]"

    opts.on('-n', '--name NAME', 'code name') do |v|
      name = v 
    end

    opts.on('-p', '--param NAME,VALUE', Array, 'parameters to pass') do |v|
      params[v[0]] = v[1]
    end

    opts.on('--priority PRIORITY', Integer, '0 (default), 1, 2') do |v|
      priority = v
    end

    opts.on('--timeout TIMEOUT', Integer, 'maximum run time in seconds from 0 to 3600 (default)') do |v|
      timeout = v
    end

    opts.on('--delay DELAY', Integer, 'delay before start in seconds') do |v|
      delay = v
    end

    if command == 'schedule'
      opts.on('--start-at TIME', 'start task at specified time') do |v|
        start_at = Time.parse(v)
      end

      opts.on('--end-at TIME', 'stop running task at specified time') do |v|
        end_at = Time.parse(v)
      end

      opts.on('--run-times RUN_TIMES', Integer, 'run task no more times than specified') do |v|
        run_times = v
      end

      opts.on('--run-every RUN_EVERY', Integer, 'run task every RUN_EVERY seconds') do |v|
        run_every = v
      end
    end
  end

  begin
    opts.parse!
  rescue OptionParser::ParseError
    puts $!.to_s
    exit 1
  end

  if name.nil?
    puts opts
    exit 1
  end

  options = {}

  options[:priority] = priority unless priority.nil?
  options[:timeout] = timeout unless timeout.nil?
  options[:delay] = delay unless delay.nil?

  if command == 'schedule'
    options[:start_at] = start_at unless start_at.nil?
    options[:end_at] = end_at unless end_at.nil?
    options[:run_times] = run_times unless run_times.nil?
    options[:run_every] = run_every unless run_every.nil?
  end

  if command == 'queue'
    client.queue(name, params, options)
  else
    client.schedule(name, params, options)
  end
end
